openapi: 3.0.1
info:
  title: Announcements
  description: ''
  version: 1.0.0
servers:
- url: https://localhost/
- url: http://localhost/
tags:
- name: announcement
  description: Everything about your Announcements
  externalDocs:
    description: Find out more
    url: http://localhost
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://localhost
paths:
  /announcement:
    get:
      tags:
      - announcement
      summary: Finds Announcements
      description: ""
      operationId: findAnnouncements
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Public'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Public'
      security:
      - announcement_auth:
        - write:announcement
        - read:announcement
    put:
      tags:
      - announcement
      summary: Update an existing announcement
      operationId: updateAnnouncement
      requestBody:
        description: Announcement object that needs to be posted
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
          application/xml:
            schema:
              $ref: '#/components/schemas/Announcement'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Announcement not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - announcement_auth:
        - write:announcement
        - read:announcement
      x-codegen-request-body-name: body
    post:
      tags:
      - announcement
      summary: Add a new announcement
      operationId: addPet
      requestBody:
        description: Announcement object that needs to be posted
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
          application/xml:
            schema:
              $ref: '#/components/schemas/Announcement'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - announcement_auth:
        - write:announcement
        - read:announcement
      x-codegen-request-body-name: body
  /announcement/local:
    get:
      tags:
      - announcement
      summary: Finds local Announcements
      description: ""
      operationId: findAnnouncementsByCity
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Local'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Local'
      security:
      - announcement_auth:
        - write:announcement
        - read:announcement
  /announcement/{announcementId}:
    post:
      tags:
      - announcement
      summary: Updates a announcement in the store with form data
      operationId: updateAnnoouncementWithForm
      parameters:
      - name: announcementId
        in: path
        description: ID of announcement that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                title:
                  type: string
                  description: Updated title of the announcement
                content:
                  type: string
                  description: Updated content of the announcement
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - announcement_auth:
        - write:announcement
        - read:announcement
    delete:
      tags:
      - announcement
      summary: Deletes an announcement
      operationId: deleteAnnouncement
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: announcementId
        in: path
        description: Announcement id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Announcement not found
          content: {}
      security:
      - announcement_auth:
        - write:announcement
        - read:announcement
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        city:
          type: string
      xml:
        name: User
    Announcement:
      required:
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: Title example
        content:
          type: string
          example: Text
        city:
          type: string
          example: Tyapche
        author:
          type: string
          example: Jack London
        authorId:
          type: integer
          format: int64
      xml:
        name: Announcement
    Local:
      type: object
      properties:
        id:
          type: integer
          format: int64
        announcementId:
          type: integer
          format: int64
        announcement:
          type: object
          properties:
            id:
              type: integer
              format: int64
            title:
              type: string
              example: Title example
            content:
              type: string
              example: Text
            city:
              type: string
              example: Tyapche
            author:
              type: string
              example: Jack London
            authorId:
              type: integer
              format: int64
    Public:
      type: object
      properties:
        id:
          type: integer
          format: int64
        announcementId:
          type: integer
          format: int64
        announcement:
          type: object
          properties:
            id:
              type: integer
              format: int64
            title:
              type: string
              example: Title example
            content:
              type: string
              example: Text
            city:
              type: string
              example: Tyapche
            author:
              type: string
              example: Jack London
            authorId:
              type: integer
              format: int64
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    announcement_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:announcement: modify announcement in your account
            read:announcement: read your announcement
    api_key:
      type: apiKey
      name: api_key
      in: header
